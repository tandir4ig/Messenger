@page "/"
@using MessageClient.Models
@inject HttpClient Http
@using System;

<div class="main-message-body">
    <div class="all-message-form">
        @foreach (var message in messages)
        {
            <div>
                <div class="message-form">
                    <div class="message-form-header">
                        <div>
                            @message.Id
                        </div>
                        <div>
                            @GetTime(message)
                        </div>
                    </div>
                    <div class="message-form-header">
                        <div>
                            @message.Content
                        </div>
                        <div>
                            <MudIcon Icon="@Icons.Material.Filled.BorderColor"
                            Color="Color.Primary"
                            Size="Size.Medium"
                            @onclick="@(() => SetValueToId(message.Id))"
                            style="cursor: pointer;" />
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="bottom-container">
        <MudTextField @bind-Value="newMessage" Label="Enter your message" Variant="Variant.Filled" />
        <MudButton OnClick="SendMessage" Color="Color.Primary">Send</MudButton>
    </div>
</div>

@code {

    private string? newMessage;
    private List<Message> messages = new();
    private Guid guid;

    protected override async Task OnInitializedAsync()
    {
        guid = Guid.NewGuid();
        messages = await Http.GetFromJsonAsync<List<Message>>("api/messages");
        messages?.Reverse();
    }

    private void SetValueToId(Guid id){
        guid = id;
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessage))
        {

            var messageRequest = new MessageRequest { Content = newMessage };
            var response = await Http.PutAsJsonAsync($"api/messages/{guid}", messageRequest);

            guid = Guid.NewGuid();

            if (response.IsSuccessStatusCode)
            {
                newMessage = string.Empty;
                messages = await Http.GetFromJsonAsync<List<Message>>("api/Messages");
                messages?.Reverse();
            }
        }
    }

    private string GetTime(Message message)
    {
        if (message.LastModified is null)
        {
            return message.Timestamp.ToLocalTime().ToString("F");
        }

        var localtime = (DateTimeOffset)(object)message.LastModified;

        return localtime.ToLocalTime().ToString("F");
    }
}
