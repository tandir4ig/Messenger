@page "/"
@using MessageClient.Models
@using MudBlazor
@inject IHttpClientFactory ClientFactory

<div class="main-message-body">
    <div class="all-message-form">
        @if (messages is not null)
        {
            @foreach (var m in messages)
            {
                <div class="message-form">
                    <div class="message-form-header">
                        <div>@m.Id</div>
                        <div>@GetTime(m)</div>
                    </div>
                    <div class="message-form-header">
                        <div>@m.Content</div>
                        <div>
                            @IsUpdated(m)
                            <MudIcon Icon="@Icons.Material.Filled.BorderColor"
                                     Color="Color.Primary"
                                     Size="Size.Medium"
                                     @onclick="() => SetValueToId(m.Id)"
                                     style="cursor:pointer;" />
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <div class="bottom-container">
        <MudTextField @bind-Value="newMessage"
                      Label="Enter your message"
                      Variant="Variant.Filled" />
        <MudButton OnClick="SendMessage" Color="Color.Primary">Send</MudButton>
    </div>
</div>

@code {
    private HttpClient Http = default!;          // клиент «MessagesApi»
    private string? newMessage;
    private List<Message>? messages = new();
    private Guid guid;

    protected override async Task OnInitializedAsync()
    {
        Http  = ClientFactory.CreateClient("MessagesApi");

        guid     = Guid.NewGuid();
        messages = await Http.GetFromJsonAsync<List<Message>>("api/messages");
    }

    private void SetValueToId(Guid id) => guid = id;

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage))
            return;

        var body = new MessageRequest { Content = newMessage };
        var resp = await Http.PutAsJsonAsync($"api/messages/{guid}", body);

        guid = Guid.NewGuid();

        if (resp.IsSuccessStatusCode)
        {
            newMessage = string.Empty;
            messages   = await Http.GetFromJsonAsync<List<Message>>("api/messages");
        }
    }

    private static string GetTime(Message m) =>
        (m.LastModified ?? m.Timestamp).ToLocalTime().ToString("F");

    private static string? IsUpdated(Message m) =>
        m.LastModified is null ? null : "message updated";
}
